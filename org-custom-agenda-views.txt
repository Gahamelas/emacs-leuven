# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Org custom agenda views
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil

#+PROPERTY:  tangle org-custom-agenda-views.el
#+PROPERTY:  padline yes
#+PROPERTY:  eval no

#+SETUPFILE: ~/src/org-style/setup/bigblow-local-abs.setup

* Key bindings

| a | xx         | A | All Tasks   |
| b |            | B |             |
| c | collectBox | C | xx          |
| d |            | D | Completed   |
| e | xx         | E |             |
| f |            | F | Future      |
| g |            | G |             |
| h |            | H |             |
| i |            | I | Inbox       |
| j |            | J |             |
| k |            | K |             |
| l |            | L | xx          |
| m | xx         | M | xx          |
| n | x          | N | Next        |
| o |            | O |             |
| p |            | P | Projects    |
| q |            | Q |             |
| r |            | R |             |
| s | xx         | S | xx          |
| t | xx         | T | xx          |
| u |            | U |             |
| v |            | V |             |
| w |            | W | Waiting for |
| x |            | X |             |
| y |            | Y | Someday     |
| z |            | Z |             |
|   |            | . | Today       |
|   |            | 7 | Next 7 Days |

XXX | [yas] elisp error! Symbol's function definition is void: ca-with-commentT |   |
XXX | [yas] elisp error! Symbol's function definition is void: ca-with-commentX |   |

XXX Have relative names for dates: instead of "in 1 day", have "Tomorrow";
instead of "in 2 days", have (for example) "Friday".

* Description

Vocabulary:
- SCHEDULED = start time
- Undated items
- Planned
- Uncategorized

Tasks views:
- Active
- Starred (= with an explicit priority)
- Completed
- Due today (only today)
- Due this week (only for current week: from Monday to Sunday included)
- Late (all overdue + today)
- Assigned to me
- Created by me
- With files attached

Sorted by:
- Creation date
- Last changed (= default)
- Project
- Creator
- Deadline
- Priority
- Title

Ordered by:
- Asc
- Desc (= default)

Get your errand list for this week by filtering the agenda (for the current
week) on the =errands= tag.

* Views

#+begin_src emacs-lisp
    ;; custom commands for the agenda -- start with a clean slate
    (setq org-agenda-custom-commands nil)
#+end_src

#+begin_note
Puisque l'on peut facilement filter par catégorie, on peut imaginer qu'il est
*inutile de trier par catégorie* : il suffit de faire =<= pour voir toutes les
tâches d'une catégorie.
#+end_note

* Collect

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("c" . "COLLECT...") t)
#+end_src

** CollectBox

#+begin_src emacs-lisp
    ;; CollectBox + Email
    (add-to-list 'org-agenda-custom-commands
                 '("cc" "CollectBox"
                   alltodo ""
                   ((org-agenda-files
                     '("~/org/refile.org" "~/org/email.org")))) t)
#+end_src

* Focus

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("f" . "FOCUS...") t)
#+end_src

** Today

#+begin_warning
A deadline with no scheduling information has an implicit scheduled date equal
to the deadline date.
#+end_warning

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("f." "Today"
                   ;; list of all TODO entries with deadline today
                   ((tags-todo "DEADLINE=\"<+0d>\""
                               ((org-agenda-overriding-header "DUE TODAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    ;; list of all TODO entries with deadline before today
                    (tags-todo "DEADLINE<\"<+0d>\""
                               ((org-agenda-overriding-header "OVERDUE")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    ;; list of all TODO entries completed today
                    (todo "TODO|DONE|CANX"            ; includes repeated tasks (back in TODO)
                               ((org-agenda-overriding-header "COMPLETED TODAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if
                                   'notregexp
                                   (format-time-string " \\(CLOSED: \\[%Y-%m-%d\\|- State.*\"DONE\".*\\[%Y-%m-%d\\) ")))
                                (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

XXX For the list of tasks completed today, make a regexp which works with state
changes (not the CLOSED timestamp), both with my custom version, and the
default one (see `org-log-note-headings').

#+begin_note
Checking that =DEADLINE= <>"" can be implemented by =(org-agenda-skip-function
'(org-agenda-skip-entry-if 'notdeadline))=.

Though, we should check which one is more responsive.
#+end_note

** Next 7 Days

- Overdue
- 7 days

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("f7" "Next 7 Days"
                   ((tags-todo "DEADLINE=\"<+0d>\""
                               ((org-agenda-overriding-header "DUE TODAY")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+1d>\""
                               ((org-agenda-overriding-header "DUE TOMORROW")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+2d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string "DUE BY %a %d" (time-add (current-time) (seconds-to-time (* 2 86400))))))
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+3d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string "DUE BY %a %d" (time-add (current-time) (seconds-to-time (* 3 86400))))))
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+4d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string "DUE BY %a %d" (time-add (current-time) (seconds-to-time (* 4 86400))))))
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+5d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string "DUE BY %a %d" (time-add (current-time) (seconds-to-time (* 5 86400))))))
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+6d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string "DUE BY %a %d" (time-add (current-time) (seconds-to-time (* 6 86400))))))
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+7d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string "DUE BY %a %d" (time-add (current-time) (seconds-to-time (* 7 86400))))))
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

** Hotlist

The *hotlist* is a convenient and smart way to see (in a single, clear overview)
the *most urgent and important tasks* for you to be working on right now.

It contains /active/ (that is, not completed) tasks that:

- are *overdue*, or
- are *due soon* (in the next 7 days), or
- have a *high priority* (=#A=), or
- are *FLAGGED*.

There is an exception to the above rule: *tasks with a future =SCHEDULED= date
will be hidden* from the hotlist regardless of their =DEADLINE= date, priority or
flag.

In other words, to be listed in the hotlist, tasks must have as well
a =SCHEDULED= date that is:

- on or before today, or
- blank.

FIXME Tasks with #A priority are not all listed (even without scheduled date)!

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("fh" "Hotlist"
                   ;; tags-todo "DEADLINE<=\"<+1w>\"|PRIORITY={A}|FLAGGED"
                   ((tags-todo "DEADLINE<\"<+0d>\""
                               ((org-agenda-overriding-header "OVERDUE")))
                    (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                               ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                    (tags-todo "DEADLINE={}+PRIORITY={A}|DEADLINE>\"<+1w>\"+PRIORITY={A}"
                               ((org-agenda-overriding-header "HIGH PRIORITY")))
                    (tags-todo "DEADLINE={}+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                               ((org-agenda-overriding-header "FLAGGED")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-when-regexp-matches))
                                (org-agenda-skip-regexp "\\[#A\\]"))))
                   ((org-agenda-todo-ignore-scheduled 'future)
                    (org-agenda-sorting-strategy '(deadline-down)))) t)
#+end_src

The hotlist is the perfect thing to *review each morning* to know what you need
to do each day.

*************** TODO Have the hotlist emailed to you each day

XXX Add an *HotNFast* list, which is everything on the Hotlist that takes less
than 10 minutes. Tasks without a time estimate will NOT show up in this list.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("fe" "Effort less than 1 hour"
                   tags-todo "Effort<>{}+Effort<\"1:00\""
                   ((org-agenda-todo-ignore-scheduled 'future))) t)
#+end_src

    During my review, I bring up the Projects I need to review, change due
    dates and priorities as appropriate. If tasks have no due dates and are not
    priority 1, then they won't show up on a Hotlist, so here's the time when
    tasks get real dates or become priority 1 (next action). Otherwise, I don't
    want to look at them in my Hotlists. Then I use Hotlists to get things done
    (ooops) in a Forster kind of way, depending on my context.

    There is one task in each Folder that repeats as often as I need to review
    that Folder. Some Folders I only need to review weekly or monthly. These
    review tasks get the gtd tag.

** Scheduled

** Projects

A project is any desired result that requires more than one action to achieve.

Making a decision about the order of your actions is very important.

A project where the actions need to be performed in sequence is called
a *sequential project*. A project where the actions can be performed in any order
is called a *parallel project*.

The project type can be specified either in XXX.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("P" "Projects"
                   tags-todo "project-DONE-CANX"
                   ((org-agenda-overriding-header "Projects (High Level)")
                    (org-agenda-sorting-strategy nil))) t)
#+end_src

* Review

See http://www.omnigroup.com/ftp/pub/software/macosx/extras/omnifocus/gtdandomnifocus.pdf
for mode dedicated solely to review!

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("r" . "REVIEW...") t)
#+end_src

** All tasks

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("ra" . "All Tasks...") t)
#+end_src

*** Sorted by due date

All *tasks*, grouped by *due date*:
- /Overdue/
- Due /today/
- Due /tomorrow/
- Due within /a week/ (next 5 days)
- Due within /a month/ (next 3 weeks)
- Due /later/
- /No due date/ (includes /CollectBox/)
- /Completed/

**** All tasks (tags view)

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rad" "All Tasks (grouped by Due Date)"
                   ((tags-todo "DEADLINE<\"<+0d>\""
                               ((org-agenda-overriding-header "OVERDUE")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE=\"<+0d>\""
                               ((org-agenda-overriding-header "DUE TODAY")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE=\"<+1d>\""
                               ((org-agenda-overriding-header "DUE TOMORROW")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                               ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                               ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE>\"<+28d>\""
                               ((org-agenda-overriding-header "DUE LATER")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))

                    ;; (todo ""
                    ;;            ((org-agenda-overriding-header "NO DUE DATE")
                    ;;             (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO={STRT}"
                               ((org-agenda-overriding-header "NO DUE DATE / STARTED")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO<>{STRT\\|WAIT\\|SDAY}"
                               ((org-agenda-overriding-header "NO DUE DATE / NEXT")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO={WAIT}"
                               ((org-agenda-overriding-header "NO DUE DATE / WAITING FOR")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO={SDAY}"
                               ((org-agenda-overriding-header "NO DUE DATE / SOMEDAY")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))))

                    (todo "DONE|CANX"
                          ((org-agenda-overriding-header "COMPLETED"))))
                   ((org-agenda-sorting-strategy '(priority-down)))) t)

    (add-to-list 'org-agenda-custom-commands
                 '("ra1" "All Tasks (sorted by Due Date)"
                   alltodo ""
                   ((org-agenda-overriding-header "All Tasks (sorted by Due Date)")
                    (org-agenda-sorting-strategy '(deadline-up)))) t) ; XXX sort not OK
#+end_src

**** All tasks (agenda view)

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 `("ra2" "All active tasks, by due date"
                   ((agenda ""
                            ((org-agenda-overriding-header "Today")
                             ;; FIXME We don't see "timed" DEADLINE
                             (org-agenda-skip-function
                              (lambda ()
                                (let* ((dl (org-entry-get nil "DEADLINE")))
                                  (if (or (not dl)
                                          (equal dl "")
                                          (org-time> dl (org-time-today)))
                                      (progn (outline-next-heading) (point))))))
                             (org-agenda-skip-scheduled-if-deadline-is-shown t)
                             (org-agenda-span 'day)
                             (org-deadline-warning-days 0)))
                    (agenda ""
                            ((org-agenda-entry-types '(:deadline))
                             (org-agenda-overriding-header "Tomorrow")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 1))
                             (org-deadline-warning-days 1)))
                    (agenda ""
                            ((org-agenda-overriding-header "Next 5 days")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 2))
                             (org-deadline-warning-days 7)))
                    (agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Next 3 weeks")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 7))
                             (org-deadline-warning-days 28))))
                   ((org-agenda-deadline-faces '((0.0 . default)))
                    (org-agenda-clockreport-mode nil)
                    (org-agenda-format-date "")
                    (org-agenda-span 'day)
                    (org-agenda-sorting-strategy '(deadline-up))
                    (org-agenda-use-time-grid nil)
                    (org-agenda-write-buffer-name "Reminders"))) t)
#+end_src

#+begin_src emacs-lisp
    (defun leuven--skip-entry-unless-deadline-in-n-days-or-more (n)
      "Skip entries that have no deadline, or that have a deadline earlier than in N days."
      (let* ((dl (org-entry-get nil "DEADLINE")))
        (if (or (not dl)
                (equal dl "")
                (org-time< dl (+ (org-time-today) (* n 86400))))
            (progn (outline-next-heading) (point)))))
#+end_src

#+begin_src emacs-lisp
    (defun leuven--skip-entry-unless-overdue-deadline ()
      "Skip entries that have no deadline, or that have a deadline later than or equal to today."
      (let* ((dl (org-entry-get nil "DEADLINE")))
        (if (or (not dl)
                (equal dl "")
                (org-time>= dl (org-time-today)))
            (progn (outline-next-heading) (point)))))

    (defun leuven--skip-entry-if-past-deadline ()
      "Skip entries that have a deadline earlier than today."
      (let* ((dl (org-entry-get nil "DEADLINE")))
        (if (org-time< dl (org-time-today))
            (progn (outline-next-heading) (point)))))

    (defun leuven--skip-entry-if-deadline-in-less-than-n-days-or-schedule-in-less-than-n-days (n1 n2)
      "Skip entries that have a deadline in less than N1 days, or that have a
    scheduled date in less than N2 days, or that have no deadline nor scheduled."
      (let* ((dl (org-entry-get nil "DEADLINE"))
             (sd (org-entry-get nil "SCHEDULED")))
        (if (or (and dl
                     (not (equal dl ""))
                     (org-time< dl (+ (org-time-today) (* n1 86400))))
                (and sd
                     (not (equal sd ""))
                     (org-time< sd (+ (org-time-today) (* n2 86400))))
                (and (or (not dl)       ; no deadline
                         (equal dl ""))
                     (or (not sd)       ; nor scheduled
                         (equal sd ""))))
            (progn (outline-next-heading) (point)))))

    (defun leuven--skip-entry-if-deadline-or-schedule ()
      "Skip entries that have a deadline or that have a scheduled date."
      (let* ((dl (org-entry-get nil "DEADLINE"))
             (sd (org-entry-get nil "SCHEDULED")))
        (if (or (and dl
                     (not (equal dl "")))
                (and sd
                     (not (equal sd ""))))
            (progn (outline-next-heading) (point)))))
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("ra3" "Agenda for all TODO entries"
                   ((agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Past due")
                             (org-agenda-skip-function
                              'leuven--skip-entry-unless-overdue-deadline)
                             (org-deadline-warning-days 0)))
                    (agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Today/tomorrow")
                             (org-agenda-skip-function
                              'leuven--skip-entry-if-past-deadline)
                             (org-agenda-span 2)
                             (org-agenda-use-time-grid t)
                             (org-deadline-warning-days 0)))
                    (agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Next 12 days")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 2))
                             (org-deadline-warning-days 14)))
                    (todo ""
                          ((org-agenda-overriding-header "Later")
                           (org-agenda-skip-function
                            '(leuven--skip-entry-if-deadline-in-less-than-n-days-or-schedule-in-less-than-n-days 15 2))
                           (org-agenda-sorting-strategy '(ts-up))))
                    (todo ""
                          ((org-agenda-overriding-header "No due date")
                           (org-agenda-skip-function
                            'leuven--skip-entry-if-deadline-or-schedule))))
                   ((org-agenda-clockreport-mode nil)
                    (org-agenda-prefix-format " %i %?-12t% s")
                    (org-agenda-span 'day)
                    (org-agenda-use-time-grid nil)
                    (org-agenda-write-buffer-name "List Review"))
                   "org-agenda-all-todo-entries.html") t)
#+end_src

*** Sorted by priority

All *tasks*, grouped by *priority*:
- Priority A
- Priority B
- No explicit priority (= priority B, implicitly)
- Priority C
- Completed

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rap" "All Tasks (grouped by Priority)"
                   ((tags-todo "PRIORITY={A}"
                               ((org-agenda-overriding-header "HIGH")))
                    (tags-todo "PRIORITY={B}"
                               ((org-agenda-overriding-header "MEDIUM")))
                    (tags-todo "PRIORITY=\"\""
                               ((org-agenda-overriding-header "NONE"))) ; = medium
                    (tags-todo "PRIORITY={C}"
                               ((org-agenda-overriding-header "LOW")))
                    (todo "DONE|CANX"
                          ((org-agenda-overriding-header "COMPLETED")
                           (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

** Calendar

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("r^" . "Calendar...") t)
#+end_src

XXX Faire 7 vues agenda "jour" pour avoir un séparateur customizable...

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("r^7" "Events and appointments for 7 days"
                   agenda ""
                   ((org-agenda-entry-types '(:timestamp :sexp))
                    ;; (org-agenda-overriding-header "Calendar for 7 days")
                    ;; (org-agenda-repeating-timestamp-show-all t)
                    (org-agenda-span 'week)
                    (org-agenda-format-date "\n%a %d")
                    ;; (org-agenda-date-weekend ... new face ...)
                    (org-agenda-time-grid nil))) t)
#+end_src

View all your tasks that are due on a certain date in a familiar, calendar-like
view.

#+begin_src emacs-lisp
    ;; calendar view for org-agenda
    (when (locate-library "calfw-org")

      (autoload 'cfw:open-org-calendar "calfw-org"
        "Open an Org schedule calendar." t)

      (add-to-list 'org-agenda-custom-commands
                   '("r^m" "Calendar for current month"
                     (lambda (&rest ignore)
                       (cfw:open-org-calendar))) t)

      ;; (defun cfw:open-org-calendar-non-work (&args)
      ;;   (interactive)
      ;;   (let ((org-agenda-skip-function 'org-agenda-skip-work))
      ;;     (cfw:open-org-calendar)))
      ;;
      ;; (add-to-list 'org-agenda-custom-commands
      ;;              '("c" "Calendar (non-work) for current month"
      ;;                cfw:open-org-calendar-non-work) t)

      )
#+end_src

** Timeline

=org-timeline= has weaknesses and although not officially deprecated, should be
best avoided.  See Carsten's comments in
http://thread.gmane.org/gmane.emacs.orgmode/39368/focus=39465

#+begin_src emacs-lisp
    ;; show what happened today
    (add-to-list 'org-agenda-custom-commands
                 '("rl" "Timeline for today"
                   ((agenda ""
                            ((org-agenda-clockreport-mode t)
                             (org-agenda-entry-types '(:timestamp))
                             (org-agenda-log-mode-items '(clock closed))
                             (org-agenda-show-log t)
                             (org-agenda-span 'day))))) t)
#+end_src

** Clock review

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rc" "Clock Review"
                   ((agenda ""
                            ((org-agenda-clockreport-mode t)
                             (org-agenda-overriding-header "CLOCK REVIEW")
                             (org-agenda-show-log 'clockcheck)
                             (org-agenda-span 'day))))) t)
#+end_src

** Daily task review

Take a moment to plan your day:

- Recently created (actions = today, later, done, delete)
- No due date (actions = tomorrow, in 2 days, next week, someday)
- Scheduled today (actions = today, later, done, delete)

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rd" "Daily review"
                   ((tags "CATEGORY={@Collect}&LEVEL=2|TODO={NEW}"
                          ((org-agenda-overriding-header "NEW TASKS")))
                    (tags "LEVEL=2"
                          ((org-agenda-overriding-header "NEW EMAILS")
                           (org-agenda-files '("~/org/email.org"))))
                    (agenda ""
                            ((org-agenda-entry-types '(:timestamp :sexp))
                             (org-agenda-overriding-header "CALENDAR")
                             (org-agenda-span 'day)))
                    (agenda ""
                            ((org-agenda-entry-types '(:deadline))
                             (org-agenda-overriding-header "DUE DATES")
                             (org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'todo 'done))
                             (org-agenda-sorting-strategy
                              '(priority-down time-down))
                             (org-agenda-span 'day)
                             (org-agenda-start-on-weekday nil)
                             (org-agenda-time-grid nil)))
                    (agenda ""
                            ((org-agenda-entry-types '(:scheduled))
                             (org-agenda-overriding-header "SCHEDULED")
                             (org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'todo 'done))
                             (org-agenda-sorting-strategy
                              '(priority-down time-down))
                             (org-agenda-span 'day)
                             (org-agenda-start-on-weekday nil)
                             (org-agenda-time-grid nil)))
                    )
                   ((org-agenda-format-date "")
                    (org-agenda-start-with-clockreport-mode nil))) t)
#+end_src

*************** TODO Show overridden headers when in agenda view

** Weekly task review

1. Clear inbox for collecting
2. Review previous calendar data
3. Review upcoming calendar
4. Review (stuck) projects
5. Review (next) actions
6. Review waiting-for
7. Review someday/maybe

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rw" "Weekly review"
                   (
                    (tags "CATEGORY={@Collect}&LEVEL=2|TODO={NEW}"
                          ((org-agenda-overriding-header "NEW TASKS")))

                    (agenda ""
                            ((org-agenda-clockreport-mode t)
                             (org-agenda-format-date
                              (concat "\n"
                                      "%Y-%m-%d" " %a "
                                      (make-string (window-width) ?_)))
                             (org-agenda-overriding-header "PAST WEEK")
                             (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                             (org-agenda-show-log 'clockcheck)
                             (org-agenda-span 7)
                             (org-agenda-start-day "-1w") ; recently done
                             (org-deadline-warning-days 0)))

                    (agenda ""
                            ((org-agenda-overriding-header "NEXT MONTH")
                             (org-agenda-span 'month)
                             (org-agenda-start-day "+0d")
                             (org-deadline-warning-days 0) ; XXX
                             ))

                    (todo "PROJ"
                          ((org-agenda-overriding-header "PROJECT LIST")))

                    ;; XXX we should show which tasks (don't) have CLOCK lines: archived vs. deleted
                    (todo "DONE|PROJDONE"
                          ((org-agenda-overriding-header
                            "Candidates to be archived")))

                    ;; (stuck ""
                    ;;        ((org-agenda-overriding-header "Stuck projects")))

                    (todo "STRT"
                          ((org-agenda-overriding-header "IN PROGRESS")
                           (org-agenda-todo-ignore-scheduled nil)))

                    (todo "TODO"        ; don't include items from CollectBox! XXX
                          ((org-agenda-overriding-header "ACTION LIST")))

                    ;; ignore scheduled and deadline entries, as they're
                    ;; visible in the above agenda (for the past + for next
                    ;; month) or scheduled/deadline'd for much later...
                    (todo "WAIT"
                          ((org-agenda-format-date "")
                           (org-agenda-overriding-header "WAITING FOR")
                           (org-agenda-todo-ignore-deadlines 'all) ; future?
                           (org-agenda-todo-ignore-scheduled t)))

                    ;; same reasoning as for WAIT
                    (todo "SDAY"
                          ((org-agenda-format-date "")
                           (org-agenda-overriding-header "SOMEDAY")
                           (org-agenda-todo-ignore-deadlines 'all)
                           (org-agenda-todo-ignore-scheduled t)))

                   ;; ((org-agenda-clockreport-mode nil)
                   ;;  (org-agenda-prefix-format " %i %?-12t% s")
                   ;;  (org-agenda-write-buffer-name "Weekly task review"))
                   ;; "~/org-weekly-review.html") t)
                    )) t)
#+end_src

** Next

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("N" "Next"
                   tags-todo "TODO<>{SDAY}"
                   ((org-agenda-overriding-header "List of all TODO entries with no due date (no SDAY)")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
                    (org-agenda-sorting-strategy '(priority-down)))) t)
#+end_src

#+begin_note
If you don't want to show scheduled items, deadlines nor appointments in lists,
you can use either =(org-agenda-todo-ignore-with-date t)=,
=(org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))= or
=(org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline
'timestamp))=.

Though, we could make a performance comparison to see whether one is quicker
than the other.
#+end_note

** COMMENT Future

XXX C'est scheduled qu'il faut checker, plutôt que deadline ?

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("F" "Future"
                   tags-todo "TODO<>{SDAY}+DEADLINE>\"<+0d>\""
                   ((org-agenda-overriding-header "List of all TODO entries with future due date (no SDAY)")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                    (org-agenda-sorting-strategy '(priority-down)))) t)
#+end_src

** Someday

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Y" "Someday"
                   tags-todo "TODO={SDAY}"
                   ((org-agenda-overriding-header "List of all SDAY entries")
                    (org-agenda-sorting-strategy '(priority-down)))) t)
#+end_src

** Ticklers

If you can't get to work on something right now, but it's not too far o! in the
distance, you probably have a Tickler item on your hands. A tickler item, in
Omni- Focus, is an item with a start date in the future. This might be
a marathon you might participate in or a concert you might like to see. With
a start date in the future, it disappears for the time being, but is not lost
forever. You can add a start date to the project or action via the inspector or
the Start column in the outline.

An item with a start date in the future doesn't appear in ordinary OmniFocus
views. But when the start date comes around, the project or action appears
again, ready for you to decide what to do with it.

** Waiting for

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("W" "Waiting for"
                   tags-todo "TODO={WAIT}"
                   ((org-agenda-overriding-header "Waiting for")
                    (org-agenda-sorting-strategy '(deadline-up)))) t) ; XXX does not work
#+end_src

* More

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("o" . "MORE...") t)
#+end_src

** Completed Tasks

XXX Group completed tasks per date of completion.

*************** TODO Add report "Recently added/completed/modified"
Recently done.
*************** END

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rr" "Recent items (past 7 days)"
                   ;; faster than tags
                   agenda ""
                   ((org-agenda-start-day "-7d")
                    (org-agenda-span 7)
                    (org-agenda-repeating-timestamp-show-all nil)
                    ;; %s is only for agenda views
                    ;; (org-agenda-prefix-format "%s")
                    ;; maybe not make much difference ka
                    ;; (org-agenda-use-tag-inheritance nil)
                    (org-agenda-inactive-leader "Inactive:  ")
                    (org-agenda-include-inactive-timestamps t))) t)
#+end_src

*** Cleanup

Cleanup:

- Done actions older than 14 days
- Inactive ticklers older than 14 days
- Completed projects older than 14 days

** Assigned to me

#+begin_src emacs-lisp
    ;; checking tasks that are assigned to me
    (add-to-list 'org-agenda-custom-commands
                 `("oa" "Tasks assigned to me"
                   tags ,(concat "Assignee={" user-login-name "\\|" user-mail-address "}")
                   ((org-agenda-overriding-header
                     ,(concat "TASKS ASSIGNED TO " user-login-name)))) t)
#+end_src

** Search

Search any word or regexp within your task name or in the note field:

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("F" "Like s, but with extra files"
                   search ""
                   ((org-agenda-text-search-extra-files
                     ;; FIXME Add `agenda-archives'
                     leuven-org-search-extra-files))) t)
#+end_src

*************** TODO Add =F= to search in all files, but not into DONE tasks
*************** END

We should have two agenda views:
- sorted by priority (C-c a a, for example)
- sorted by effort

** Notes

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("n" "Organize thoughts to refile"
                   tags "refile|capture"
                   ((org-agenda-overriding-header "Refile stuff"))) t)
#+end_src

** Export (printed agenda)

To create PDF output, the GhostScript =ps2pdf= utility must be installed on the
system.

The *exported agenda views* are not *stored* when you use one of those commands
interactively because this might use too much overhead.  Instead, there is a
special command to produce all specified files in one step: =C-c a e=.

=C-x C-w=: write the agenda view to a file.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("E" . "Exported agenda files...") t)

    ;; exporting agenda views
    (add-to-list 'org-agenda-custom-commands
                 '("Ea"
                   agenda ""
                   (;; (org-tag-faces nil)
                    (ps-landscape-mode t)
                    (ps-number-of-columns 1))
                   ("~/org-agenda.txt" "~/org-agenda.html" "~/org-agenda.pdf")) t)

    (add-to-list 'org-agenda-custom-commands
                 '("Ep" "Call list"
                   tags-todo "phone"
                   ((org-agenda-prefix-format " %-20:c [ ] " )
                    (org-agenda-remove-tags t)
                    ;; (org-agenda-with-colors nil)
                    (org-agenda-write-buffer-name
                     "Phone calls that you need to make")
                    (ps-landscape-mode t)
                    (ps-number-of-columns 1))
                   ("~/org-calls.pdf")) t)
#+end_src

** Task markers (in the current buffer)

#+begin_src emacs-lisp
    ;; create a sparse tree (current buffer only) with all entries containing
    ;; the word `TODO', `FIXME' or `XXX'
    (add-to-list 'org-agenda-custom-commands
                 '("1" "Task markers (in current buffer)"
                   occur-tree "\\<TODO\\|FIXME\\|XXX\\>") t)
#+end_src

** Others

*************** TODO Add a custom view which is some "bill" to send to your boss/client (table view)

How to implement *reminders*?  Once a day, week, month, year?

Setting a warning period does well remind us from a certain period before the
deadline, but it's always, then (at every consultation of the list)!

* Buggy commands
  :PROPERTIES:
  :tangle:   no
  :END:

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Ee" "Print reports (TODO)"
                   ;; See ThinkingRock examples
                   ((agenda ""
                            ((org-agenda-overriding-header "Scheduled TODO's")
                             (org-agenda-prefix-format "%8e ")
                             (org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'regexp "habit"))
                             (org-agenda-sorting-strategy '(todo-state-up))
                             (org-agenda-span 'week)
                             (org-agenda-todo-keyword-format "%-4s")))
                    (tags-todo "thisweek"
                               ((org-agenda-overriding-iding-header
                                 "Unscheduled TODO's; also tasks (from which todo's were generated)")
                                (org-agenda-prefix-format "%-7e")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'scheduled))
                                (org-agenda-sorting-strategy '(todo-state-up))
                                (org-agenda-todo-keyword-format "%-10s"))))
                   ((org-agenda-remove-tags t))
                   ("~/org-agenda-de.html")) t)
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("," . "Priorities...") t)

    ;; list only priority A tasks for the current day
    (add-to-list 'org-agenda-custom-commands
                 '(",A" "Priority #A tasks for today"
                   agenda ""
                   ((org-agenda-skip-function
                     '(org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]"))
                    (org-agenda-span 'day)
                    (org-agenda-overriding-header
                     "Today's priority #A tasks: "))) t)

    ;; list priority A and B tasks for the current day
    (add-to-list 'org-agenda-custom-commands
                 '(",B" "Priority #A and #B tasks for today"
                   agenda ""
                   ((org-agenda-overriding-header
                     "Today's priority #A and #B tasks: ")
                    (org-agenda-skip-function
                     '(org-agenda-skip-entry-if 'regexp "\\=.*\\[#C\\]"))
                    (org-agenda-span 'day))) t)
#+end_src

#+begin_src emacs-lisp
    ;; (add-to-list 'org-agenda-custom-commands
    ;;              '("A" . "0. Agenda...") t)
    ;;
    ;; (add-to-list 'org-agenda-custom-commands
    ;;              '("AF" "Agenda of upcoming due dates (6 months)"
    ;;                ;; FIXME We don't see DEADLINE with `-1m' (or so)
    ;;                ;; specifications (if they are more than 1m ahead of now)!
    ;;                agenda ""
    ;;                ((org-agenda-skip-function
    ;;                  '(org-agenda-skip-entry-if 'notdeadline))
    ;;                 (org-agenda-span 'day)
    ;;                 (org-agenda-time-grid nil)
    ;;                 (org-deadline-warning-days 183))) t)
    ;;              ;; Some SCHEDULED are shown (when paired with a deadline and
    ;;              ;; scheduled in the past or for today)
#+end_src

* Unused code

#+begin_src emacs-lisp :tangle no
  ("d" "Daily Agenda"
   ((agenda ""
            ((org-agenda-todo-keyword-format "")
             (org-agenda-remove-tags t)))
    (tags "LEVEL=2+goals"
          ((org-agenda-remove-tags t)
           (org-agenda-prefix-format "  ")
           (org-agenda-todo-keyword-format "")))
    (todo "TODO"
          ((org-agenda-sorting-strategy '(tag-up))
           (org-agenda-show-inherited-tags nil)
           (org-agenda-todo-keyword-format "")))
    (todo "STRT"
          ((org-agenda-todo-keyword-format "")))
    (stuck ""
           ((org-agenda-remove-tags t)))))

  ("p" "Printed agenda"
   ((agenda ""
            ((org-agenda-span 'week)
             (org-agenda-start-on-weekday nil)
             (org-agenda-time-grid nil)
             ;; (org-agenda-repeating-timestamp-show-all t)
             (org-agenda-prefix-format "  -->  %t %s")
             (org-agenda-skip-function
              '(org-agenda-skip-entry-if 'deadline 'scheduled))))
    (agenda ""
            ((org-agenda-span 'day)
             (org-agenda-sorting-strategy '(time-up tag-up))
             (org-agenda-todo-keyword-format "[ ]")
             (org-agenda-scheduled-leaders '("" ""))
             (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
             (org-agenda-prefix-format "%t %T %s")
             ))
    (agenda ""
            ((org-agenda-span 'day)
             (org-deadline-warning-days 7)
             (org-agenda-time-grid nil)
             (org-agenda-include-diary nil)
             (org-agenda-todo-keyword-format "[ ]")
             (org-agenda-scheduled-leaders '("" ""))
             (org-agenda-overriding-header "Due Dates:")
             (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
             (org-agenda-prefix-format "%t %s")))
    (todo "TODO|STRT"
          ((org-agenda-sorting-strategy '(tag-up priority-down))
           (org-agenda-todo-ignore-with-date t)))
    (todo "WAIT"))
   ((org-agenda-with-colors nil)
    (org-agenda-prefix-format "%T [ ]")
    (org-agenda-todo-keyword-format "")
    (org-agenda-remove-tags t)
    (ps-number-of-columns 2)
    ;; (ps-print-header nil)
    (ps-landscape-mode t))
   ("~/org-agenda-storage.pdf"))

  ("P" "Projects"
   ((agenda ""
            ((org-agenda-skip-function
              '(org-agenda-skip-entry-if 'notregexp "* PROJ"))
             (org-agenda-include-diary nil)
             (org-agenda-time-grid nil)))
    (todo "PROJ"
          ((org-agenda-todo-ignore-deadlines t)
           (org-agenda-sorting-strategy '(priority-down))))))
#+end_src

* Test cases

- Entries with no TODO keyword, but well with a DEADLINE.
- Scheduled date, but no deadline
- Scheduled date and deadline
  + on the same date
  + on different dates
- No scheduled date, well a deadline
- SDAY with a deadline date
- Entries with "timed" dates

* Basic tools

** Firetask

http://firetask.com/images/Firetask-Mac-2.png

Review / Organize:
- In-tray
- Today
- Tomorrow
- Due
- Next

** TickTick

http://ticktick.com/

- All
- Today
- Next 7 days
- Inbox
- List (Work, Family)
- Completed
- Trash

** Todoist

*** Views

- Today ::
     overdue, today

- 7 days ::
     overdue, 7 days

- View all projects ::
     (due date = "Today", "Tomorrow", "Wednesday" .. "Monday", "DD Aug", "DD
     Jan 2014")

- Priority 1 tasks ::
     priority 1

- Priority 2 tasks ::
     priority 2

- Priority 3 tasks ::
     priority 3

- Tasks with no due date ::
     no date

*** Email "Todoist Daily Digest for Aug 27 (1 due today, 2 overdue)"

#+begin_verse
Hi Fabrice

You've got 1 task(s) in 1 project(s) scheduled for today.

In total you completed 2 task(s)!

*1 TASKS DUE TODAY*

-   <task>             <project> ●

[[View in Todoist...]]

*2 TASKS OVERDUE*

- 8 day(s) ago, Aug 20, 2013
    <task>             <project> ●

- 2 day(s) ago, Aug 26, 2013
    <task>             <project> ●

[[View in Todoist...]]

*YOUR PRODUCTIVITY THE LAST 9 DAYS*

<Graph>

[[View more graphs... ]]
#+end_verse

** Any.do

http://www.any.do/faq

* Tools with Someday

** IQTELL

See Knowledge base for videos
See Webinars (recorded session) on https://getsatisfaction.com/qtell

See playlist on YouTube: http://www.youtube.com/watch?v=1MNRzChizfA&list=UUr2Am7PCP6Yg1G0pXyCQYBg

See great summary of IQTELL on http://www.youtube.com/watch?v=jTBUqmntQhs

See Detailed GTD Tutorial on http://www.youtube.com/watch?v=n2q9D5QLZBo

*** Documentation

- Due Date
- Reminder = email to remind me of a due date

The Tickler folder is a place to keep those non-actionable items that you need
to review at a later date. For example, if you get an email from a friend
about a Bruce Springsteen concert in August 2013, you could create a tickler
entry from that email and revisit it when tickets go on sale.

By doing this you can reach Inbox Zero, and you'll have the peace of mind that
you won't drop the ball on anything.

*** Folders

- Actions
- Projects

*** Watch lists

- Due today
- Due tomorrow
- Due this week
- Overdue
- Personal
- Work

*** Available applications

- Someday
  Categories:
  + Checklist
  + Don't procrastinate
  + Fun
  + Great quotes
  + Ideas
  + Inspiration
  + Knowhow
  + Might like to buy
  + Might like to read
  + Music to download
  + Travel
  + Vacation ideas

- Tickler
  Same categories as for the Someday items

*** Upcoming events

*** Email, calendars & contacts

*** Contexts

- Agenda
- Calls
- Computer
- Errand
- Home
- Office

*** Areas

- Personal
- Work

*** View of a Project

- Project Info
  + Short Description
  + Status
  + Tags
  + Start Date
  + Due Date
  + Priority
- Notes
- Actions
- Email

* Tools with Someday + Waiting

** Vitalist

http://www.vitalist.com/

*** Views

- Inbox
- Actions
- Waiting
- Someday
- Ticklers
- Reference

*** Date filter

- Overdue
- Today
- This week
- Next week
- Later
- [No date]

*** Contexts

- *computer*
- email
- errands
- *home*
- phone
- *work*

* Tools with Scheduled

* Tools with Assigned to me

** DoneDesk

https://donedesk.com/

*** Hierarchical tasks or subtasks

Implement hierarchical tasks the way Trog Bar does ("Natural Project
Management"): any task becomes a project just by adding subtasks to it. These
projects should be a hybrid between tasks and workspaces, offering control
over dates, deadlines, delegation structure, etc. (like a task) while also
allowing you to manage a list of tasks and participants in the project (like a
workspace).
