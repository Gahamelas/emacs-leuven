# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     SQL YASnippets
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:  emacs, yasnippet, snippets, code templates
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2
#+EXCLUDE_TAGS: noexport

#+PROPERTY:  header-args :eval never :padline yes :tangle yes

#+SETUPFILE: ~/.dotfiles/org/theme-readtheorg.setup

* Overview

A *SQL snippet* is a frequently used *code template* which can be inserted into
a code you are typing by pressing the TAB key.

* Insert Snippet...

** Function

*** [ctif] Create Inline Table Function

Creates an inline table function.

#+begin_src sql :tangle snippets/sql-mode/citf.yasnippet
# name: Create inline table-va...
# --
CREATE FUNCTION ${1:[schema].[function_name]}
    (@parameter_name AS INT)
RETURNS TABLE
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
RETURN ( $0 )
GO
#+end_src

*** [ctf] Create Multi-Statement Table Function

Creates a multi-statement table function.

#+begin_src sql :tangle snippets/sql-mode/ctf.yasnippet
# name: Create multi-stateme...
# --
CREATE FUNCTION ${1:[schema].[function_name]}
    (@parameter_name AS INT)
RETURNS @return_variable TABLE (/* table type definition */)
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
BEGIN
    RETURN $0
END
GO
#+end_src

*** [csf] Create Scalar Function

Creates a scalar function.

#+begin_src sql :tangle snippets/sql-mode/csf.yasnippet
# name: Create scalar function
# --
CREATE FUNCTION ${1:[schema].[function_name]}
    (@parameter_name AS INT)
RETURNS INT
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
BEGIN
    RETURN $0
END
GO
#+end_src

** Index

#+begin_src sql :tangle snippets/sql-mode/cci.yasnippet
# name: Create non-unique cl...
# --
CREATE CLUSTERED INDEX ${3:index_name}
ON ${1:[schema].[owner_name]} ( ${2:column} )
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
GO
$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/cni.yasnippet
# name: Create non-unique n...
# --
CREATE NONCLUSTERED INDEX ${3:index_name}
ON ${1:[schema].[owner_name]} ( ${2:column_name} )
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
GO
$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/cuci.yasnippet
# name: Create unique cluster...
# --
CREATE UNIQUE CLUSTERED INDEX ${3:index_name}
ON ${1:[schema].[owner_name]} ( ${2:column} )
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
GO
$0
#+end_src

*** [cuni] Create Unique Non-Clustered Index

Creates a unique, non-clustered index.

#+begin_src sql :tangle snippets/sql-mode/cuni.yasnippet
# name: Create unique nonclu...
# --
CREATE UNIQUE NONCLUSTERED INDEX ${3:index_name}
ON ${1:[schema].[index_name]} ( ${2:column} )
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
GO
$0
#+end_src

** Login

*** [cl] Create SQL Authentication Login

Creates a SQL Server Authentication login.

#+begin_src sql :tangle snippets/sql-mode/cl.yasnippet
# name: CREATE SQL Server l...
# --
CREATE LOGIN $0 /* Add WITH or FROM (below) as appropriate */
--WITH
--  PASSWORD = 'password' /* HASHED */ /* MUST CHANGE */
--  SID = sid
--  DEFAULT_DATABASE = database
--  DEFAULT_LANGUAGE = language
--  CHECK_EXPIRATION = ON | OFF
--  CHECK_POLICY = ON | OFF
--  CREDENTIAL = credential_name
--FROM
--  WINDOWS
--    WITH
--      DEFAULT_DATABASE = database
--      DEFAULT_LANGUAGE = language
--  CERTIFICATE certificate_name
--  ASYMMETRIC KEY key_name
GO
#+end_src

** Role

** Schema

** Stored Procedure

*** [cp]

#+begin_src sql :tangle snippets/sql-mode/cp.yasnippet
# name: Create stored proced...
# --
--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO
CREATE PROCEDURE ${1:[schema].[procedure_name]}
    @parameter_name AS INT
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS
    $0
GO
--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO
#+end_src

*** [crlp]

#+begin_src sql :tangle snippets/sql-mode/clrp.yasnippet
# name: Create CLR stored pr...
# --
--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO

CREATE PROCEDURE [schema].[procedure_name]
(
    @parameter_name AS INT
)
-- WITH EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS EXTERNAL NAME [assembly].[class].[method]
GO

--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--GO$0
#+end_src

** Synonym

** Table

*** [ct] Create Table

Creates a table.

#+begin_src sql :tangle snippets/sql-mode/ct.yasnippet
# name: Create table
# --
CREATE TABLE ${1:[schema].[table_name]}
(
    -- column_1 int NOT NULL,
    -- column_2 int NULL
    $0
)
#+end_src

** Trigger

*** Create Trigger

Creates a trigger.

#+begin_src sql :tangle no
# name: Create trigger
# --
CREATE TRIGGER TriggerName
    ON [schema].[TableName]
    FOR DELETE, INSERT, UPDATE
    AS
    BEGIN
    SET NOCOUNT ON
    END
$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/atdt.yasnippet
# name: Disable trigger
# --
ALTER TABLE ${1:[schema].[table_name]} DISABLE TRIGGER $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/atdta.yasnippet
# name: Disable all triggers on...
# --
ALTER TABLE ${1:[schema].[table_name]}$0 DISABLE TRIGGER ALL
#+end_src

#+begin_src sql :tangle snippets/sql-mode/atet.yasnippet
# name: Enable trigger
# --
ALTER TABLE ${1:[schema].[table_name]} ENABLE TRIGGER $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ateta.yasnippet
# name: Enable all triggers on...
# --
ALTER TABLE ${1:[schema].[table_name]}$0 ENABLE TRIGGER ALL
#+end_src

** User

*** [cu] Create User

Creates a database user.

#+begin_src sql :tangle snippets/sql-mode/cu.yasnippet
# name: Create database user
# --
CREATE USER ${1:UserName}$0
FOR /* FROM */ LOGIN /* login_name */
--	CERTIFICATE certificate_name
--	ASYMMETRIC KEY key_name
--	WITHOUT LOGIN
--	WITH DEFAULT_SCHEMA = schema_name
GO
#+end_src

** User Defined Data Type

** User Defined Table Type

** User Defined Type

** View

*** [cv] Create View

Creates a view.

#+begin_src sql :tangle snippets/sql-mode/cv.yasnippet
# name: Create view
# --
CREATE VIEW ${1:[schema].[view_name]}
--WITH ENCRYPTION, SCHEMABINDING, VIEW_METADATA
AS
    -- SELECT * FROM dbo.Sample_Table
    $0
-- WITH CHECK OPTION
GO
#+end_src

** ---------------------------------------------------------

** A

#+begin_src sql :tangle snippets/sql-mode/af.yasnippet
# name: ALTER FUNCTION fr...
# --    
ALTER FUNCTION $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ap.yasnippet
# name: ALTER PROCEDURE
# --    
ALTER PROCEDURE $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/at.yasnippet
# name: ALTER TABLE fragm...
# --    
ALTER TABLE $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ata.yasnippet
# name: Add column
# --
ALTER TABLE ${1:[schema].[table_name]} ADD [${2:column_name}] INT$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/atac.yasnippet
# name: Modify column
# --
ALTER TABLE ${1:[schema].[table_name]} ALTER COLUMN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/atd.yasnippet
# name: Drop column
# --    
ALTER TABLE ${1:[schema].[table_name]} DROP COLUMN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/atdc.yasnippet
# name: Drop constraint
# --
ALTER TABLE ${1:[schema].[table_name]} DROP CONSTRAINT $0
#+end_src

** B

#+begin_src sql :tangle snippets/sql-mode/be.yasnippet
# name: BEGIN...END block
# --
BEGIN
    $0
END
#+end_src

#+begin_src sql :tangle snippets/sql-mode/bt.yasnippet
# name: Begin transaction
# --
BEGIN TRANSACTION $0
#+end_src

** C

#+begin_src sql :tangle snippets/sql-mode/cdb.yasnippet
# name: Create database
# --
CREATE DATABASE ${1:database_name}
ON
PRIMARY ( -- or use FILEGROUP filegroup_name
  NAME = $1_data,
  FILENAME = '$1.mdf'
) --, and repeat as required
LOG ON
(
  NAME = $1_log,
  FILENAME = '$1.ldf'
) --, and repeat as required
--COLLATE collation_name
--WITH
--  DB_CHAINING ON/OFF
--  TRUSTWORTHY ON/OFF
--FOR LOAD
--FOR ATTACH
--WITH
--  ENABLE_BROKER
--  NEW_BROKER
--  ERROR_BROKER_CONVERSATIONS
--FOR ATTACH_REBUILD_LOG
GO
#+end_src

#+begin_src sql :tangle snippets/sql-mode/cdbsnap.yasnippet
# name: Create database sna...
# --
CREATE DATABASE ${2:database_name} 
ON 
    (
    NAME = $2_data,
    FILENAME = '$2.ss'
    )
AS SNAPSHOT OF ${1:source_database}
GO$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/cj.yasnippet
# name: CROSS JOIN fragment
# --
CROSS JOIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/cte.yasnippet
# name: WITH cte fragment
# --

        WITH ${1:cte_name} AS
(

)
SELECT $0
FROM $1
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ctr.yasnippet
# name: Commit transaction
# --
COMMIT TRANSACTION $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/curff.yasnippet
# name: Fast-forward read-on...
# --
/* declare variables */
DECLARE @variable INT

DECLARE ${1:cursor_name} CURSOR FAST_FORWARD READ_ONLY FOR ${2:select_statement}

OPEN $1

FETCH NEXT FROM $1 INTO @variable

WHILE @@FETCH_STATUS = 0
BEGIN
    $0

    FETCH NEXT FROM $1 INTO @variable
END

CLOSE $1
DEALLOCATE $1
#+end_src

** D

#+begin_src sql :tangle snippets/sql-mode/dd.yasnippet
# name: Drop database
# --
DROP DATABASE $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/df.yasnippet
# name: DELETE FROM frag...
# --
DELETE FROM ${1:[schema].[table_name]} WHERE $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/dfn.yasnippet
# name: Drop function
# --
DROP FUNCTION $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/di.yasnippet
# name: Drop index
# --
DROP INDEX $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/dl.yasnippet
# name: Drop login
# --
DROP LOGIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/dp.yasnippet
# name: Drop stored procedure
# --
DROP PROCEDURE $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/dt.yasnippet
# name: Drop table
# --
DROP TABLE $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/du.yasnippet
# name: Drop user
# --
DROP USER $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/dv.yasnippet
# name: Drop view
# --
DROP VIEW $0
#+end_src

** E

#+begin_src sql :tangle snippets/sql-mode/err.yasnippet
# name: @@ERROR function ...
# --
@@ERROR$0
#+end_src

** F

#+begin_src sql :tangle snippets/sql-mode/fj.yasnippet
# name: FULL JOIN fragment
# --
FULL JOIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/foj.yasnippet
# name: FULL OUTER JOIN fr...
# --
FULL OUTER JOIN $0
#+end_src

** G

#+begin_src sql :tangle snippets/sql-mode/gb.yasnippet
# name: GROUP BY fragment
# --
GROUP BY $0
#+end_src

** I

#+begin_src sql :tangle snippets/sql-mode/ifs.yasnippet
# name: IF fragment
# --
IF 1 = 1
BEGIN
    $0
END
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ii.yasnippet
# name: INSERT INTO fragment
# --
INSERT INTO $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ij.yasnippet
# name: INNER JOIN fragment
# --
INNER JOIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/is.yasnippet
# name: INFORMATION_SCH...
# --
INFORMATION_SCHEMA$0
#+end_src

** J

#+begin_src sql :tangle snippets/sql-mode/j.yasnippet
# name: JOIN fragment
# --
JOIN $0
#+end_src

** L

#+begin_src sql :tangle snippets/sql-mode/lj.yasnippet
# name: LEFT JOIN fragment
# --
LEFT JOIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/loj.yasnippet
# name: LEFT OUTER JOIN fr...
# --
LEFT OUTER JOIN $0
#+end_src

** M

#+begin_src sql :tangle snippets/sql-mode/mro.yasnippet
# name: Retrieve 20 most rec...
# --
SELECT TOP 20 [name], [type], crdate
FROM sysobjects
ORDER BY crdate DESC
#+end_src

** O

#+begin_src sql :tangle snippets/sql-mode/ob.yasnippet
# name: ORDER BY fragment
# --
ORDER BY $0
#+end_src

** R

#+begin_src sql :tangle snippets/sql-mode/rj.yasnippet
# name: RIGHT JOIN fragment
# --
RIGHT JOIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/roj.yasnippet
# name: RIGHT OUTER JOIN f...
# --
RIGHT OUTER JOIN $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/rt.yasnippet
# name: Rollback transaction
# --
ROLLBACK TRANSACTION $0
#+end_src

** S

#+begin_src sql :tangle snippets/sql-mode/san.yasnippet
# name: Change the current A...
# --
SET ANSI_NULLS ON$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/scf.yasnippet
# name: Count number of rec...
# --
SELECT COUNT(*) FROM $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/sph.yasnippet
# name: Execute sp_help
# --
EXEC sp_help$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/spt.yasnippet
# name: Execute sp_helptext
# --
EXEC sp_helptext$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/sqi.yasnippet
# name: Change the current ...
# --
SET QUOTED_IDENTIFIER ON$0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/ssf.yasnippet
# name: SELECT * FROM frag...
# --
SELECT * FROM $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/st100.yasnippet
# name: SELECT top 100 rows
# --
SELECT TOP 100 * FROM $0
#+end_src

#+begin_src sql :tangle snippets/sql-mode/sxa.yasnippet
# name: Change the current X...
# --
SET XACT_ABORT OFF
#+end_src

** T

#+begin_src sql :tangle snippets/sql-mode/tc.yasnippet
# name: TRY ... CATCH fragm...
# --
BEGIN TRY
    
END TRY
BEGIN CATCH
    $0
END CATCH
#+end_src

#+begin_src sql :tangle snippets/sql-mode/w2.yasnippet
# name: Execute sp_who2$0
# --
	EXEC sp_who2$0
#+end_src

** X

#+begin_src sql :tangle snippets/sql-mode/xpfd.yasnippet
# name: Retrieve free space o...
# --
EXEC master..xp_fixeddrives
#+end_src

* Surround With...

** [begin] Code Snippet for BEGIN...END block

#+begin_src sql :tangle snippets/sql-mode/begin.yasnippet
# name: Surround with BEGIN...
# --
BEGIN
`yas-selected-text`
END
#+end_src

** [if] Code Snippet for IF construct

#+begin_src sql :tangle snippets/sql-mode/if.yasnippet
# name: Surround with IF...
# --
IF( ${1:Condition} )
BEGIN

`yas-selected-text`

END
 #+end_src

** [while] Code Snippet for WHILE loop

#+begin_src sql :tangle snippets/sql-mode/while.yasnippet
# name: Surround with WHILE...
# --
WHILE( ${1:Condition} )
BEGIN

`yas-selected-text`

END
 #+end_src
